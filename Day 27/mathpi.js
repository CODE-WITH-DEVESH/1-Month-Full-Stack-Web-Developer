// const desccripter = Object .getOwnPropertyDescriptor(Math , "PI")
// console.log(desccripter)


// // console.log(Math.PI)

// const chai = {
//     name : "Ginger Chai",
//     price : 240,
//     isAvailable : true
// }
// console.log(chai)
// console.log(Object .getOwnPropertyDescriptor(chai, "name"))

// Object.defineProperty(chai , 'name',{
//     writable: false,
//     enumerable: false,


// })

// for (const [key, value] of Object.entries(chai)) {
//     console.log(`${key} :${value}`)
    
// }















// üîç JavaScript - Property Descriptors Explained with Compiler

// ‚úÖ PART 1: Get Property Descriptor of Built-in Property
const desccripter = Object.getOwnPropertyDescriptor(Math , "PI")
console.log(desccripter)
// OUTPUT:
// {
//   value: 3.141592653589793,
//   writable: false,
//   enumerable: false,
//   configurable: false
// }

// üîé Explanation:
// ‚û§ Math.PI ek built-in constant hai
// ‚û§ Iska value fix hai (writable: false)
// ‚û§ Yeh loop mein show nahi hota (enumerable: false)
// ‚û§ Isko delete ya modify nahi kar sakte (configurable: false)


// ‚úÖ PART 2: User Defined Object
const chai = {
    name : "Ginger Chai",
    price : 240,
    isAvailable : true
}

console.log(chai) // Prints full object
console.log(Object.getOwnPropertyDescriptor(chai, "name"))
// OUTPUT:
// {
//   value: 'Ginger Chai',
//   writable: true,
//   enumerable: true,
//   configurable: true
// }

// üîé Explanation:
// ‚û§ `name` property user-defined hai
// ‚û§ Iske saare descriptors default: true hote hain
//     ‚Üí writable: true ‚Üí value badal sakte hain
//     ‚Üí enumerable: true ‚Üí loop mein aayega
//     ‚Üí configurable: true ‚Üí delete ya change kar sakte hain


// ‚úÖ PART 3: Modify Property Descriptor
Object.defineProperty(chai , 'name',{
    writable: false,      // ‚ùå ab value change nahi hogi
    enumerable: false,    // ‚ùå ab loop mein nahi aayegi
})

// ‚úÖ Loop through properties
for (const [key, value] of Object.entries(chai)) {
    console.log(`${key} : ${value}`)
}
// OUTPUT:
// price : 240
// isAvailable : true
// ‚õî name property print nahi hui kyunki enumerable: false hai


// üß† Summary / Interview Questions:

// 1Ô∏è‚É£ What is Object.getOwnPropertyDescriptor()?
//    ‚û§ It tells us about `value`, `writable`, `enumerable`, and `configurable` properties of any object's key.

// 2Ô∏è‚É£ What does Object.defineProperty() do?
//    ‚û§ It allows us to *control behavior* of a property (make it read-only, hidden from loops, or non-configurable).

// 3Ô∏è‚É£ What is writable: false?
//    ‚û§ You cannot change the value of that property now.

// 4Ô∏è‚É£ What is enumerable: false?
//    ‚û§ Property will NOT show in `for..in`, `Object.entries`, or `JSON.stringify()`.

// 5Ô∏è‚É£ Where is it used in real life?
//    ‚û§ Used in defining secure properties like `Math.PI`, hidden internal object keys, or creating constants.

// üî• BONUS TIP:
// ‚û§ Try editing `chai.name = "Masala Chai"` after making it non-writable. It won‚Äôt change!
// ‚û§ You can use `Object.freeze()` to lock the whole object (all props non-writable & non-configurable).

